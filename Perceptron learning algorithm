import numpy as np

class Perceptron:
    def __init__(self, input_size, learning_rate=0.1, epochs=100):
        self.weights = np.random.randn(input_size + 1)  # Include bias
        self.learning_rate = learning_rate
        self.epochs = epochs

    def activation(self, x):
        return 1 if x >= 0 else 0

    def predict(self, inputs):
        summation = np.dot(inputs, self.weights[1:]) + self.weights[0]  # Weighted sum + bias
        return self.activation(summation)

    def train(self, training_inputs, labels):
        for _ in range(self.epochs):
            for inputs, label in zip(training_inputs, labels):
                prediction = self.predict(inputs)
                self.weights[1:] += self.learning_rate * (label - prediction) * inputs  # Update weights
                self.weights[0] += self.learning_rate * (label - prediction)  # Update bias

# Example usage to train the perceptron for OR gate
if __name__ == "__main__":
    # Training data for OR gate (inputs and labels)
    training_inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    labels = np.array([0, 1, 1, 1])  # OR gate labels

    # Create a perceptron for the OR gate problem (input size = 2)
    perceptron = Perceptron(input_size=2)

    # Train the perceptron
    perceptron.train(training_inputs, labels)

    # Test the trained perceptron
    test_inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    print("Testing the trained perceptron for OR gate:")
    for inputs in test_inputs:
        prediction = perceptron.predict(inputs)
        print(f"Input: {inputs} Predicted Output: {prediction}")
